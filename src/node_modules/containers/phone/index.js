/* 
  Container - Phone
  для отдельного телефона
  
*/

import React, {Component} from 'react'

import {Link} from 'react-router'

import {connect} from 'react-redux'

import R from 'ramda'

import {fetchPhoneById, addPhoneToBasket} from 'actions'

import {getPhoneById} from 'selectors'

import BasketCart from 'components/basketCart'



class Phone extends Component {

// Мотод componentDidMount вызывается сразу после загрузки компонента

  componentDidMount () {
    // this.props.params.id -react-router нам автоматом прокидывает обьект params, где мы можем прочитать параметры url
    this.props.fetchPhoneById(this.props.params.id)
  }

  renderContent () {
    // React компоненты работают с props, поэтому вызываем оттуда
    const {phone} = this.props

    return (
      <div className='thumbnail'>
        <div className='row'>
          <div className='col-md-6'>
            <img
              className='img-thumbnail'
              src={phone.image}
              alt={phone.name}
            />
          </div>
          <div className='col-md-6'>
            {this.renderFields()}
          </div>
        </div>
        <div className='caption-full'>
          <h4 className='pull-right'>${phone.price}</h4>
          <h4>{phone.name}</h4>
          <p>{phone.description}</p>
        </div>
      </div>
    )
  }

  // Рендерим Sidebar
    renderSidebar () {
      // Деструктуризацией вызываем из props данные phone, addPhoneToBasket
    const {phone, addPhoneToBasket} = this.props
    return (
      <div>
        <p className='lead'>Quick shop</p>
        <BasketCart />
        <div className='form-group'>
          <h1>{phone.name}</h1>
          <h2>${phone.price}</h2>
        </div>
        <Link to='/' className='btn btn-info btn-block'>Back to store</Link>
        <button
          type='button'
          className='btn btn-success btn-block'
          onClick={() => addPhoneToBasket(phone.id)}
        >
          Add to cart
        </button>
      </div>
    )
  }

  // Компонент составной
  renderFields () {
    // React компоненты работают с props, поэтому вызываем оттуда
    const {phone} = this.props
    /* 
    R.compose делает композицию из функций и они выполняются справа налево. 
    То есть мы сначала используем метод pick, чтобы оставить только необходимые нам поля,
    а потом toPairs, чтобы превратить каждую пару ключ значение в елемент массива. В массив массивов
    */

    const columnFields = R.compose(
      // В массив массивов сдвумя полями: название, значение
      R.toPairs,
      // Берем из объекта эти поля и их значения
      R.pick([
        'cpu',
        'camera',
        'size',
        'weight',
        'display',
        'battery',
        'memory'        
      ])
      // И все поля берем из phone
    )(phone)
  
    // у нас вывелся массив массивов, где первый елемент у нас ключ, а второй значение.
    // напишем map с деструктуризацией и выведем ключ и значение.
    return columnFields.map(([key, value]) => (
      // Делаем итерацию по key, записывая в строку ключ и значение
      <div className='column' key={key}>
        <div className='ab-details-title'>
          <p>{key}</p>
        </div>
        <div className='ab-details-info'>
          {value}
        </div>
      </div>
    ))
  }

  // Отрисовка компонента Phone 
  render () {
    // React компоненты работают с props, поэтому вызываем оттуда
  const {phone} = this.props
  return (
    <div className='view-container'>
      <div className='container'>
        <div className='row'>
          <div className='col-md-9'>
          {/* Проверяем чтобы телефон загрузился, если true, то вызываем renderContent */}
            {phone && this.renderContent()}
          </div>
          <div className='col-md-3'>
          {/* Проверяем чтобы телефон загрузился, если true, то вызываем renderSidebar */}
            {phone && this.renderSidebar()}
          </div>
        </div>
      </div>
    </div>
  )
}

}

// Методы подключения CONNECT пишутся после класса

// Этим отправляем state в props
const mapStateToProps = state => {
  return {
    phone: getPhoneById(state, state.phonePage.id)
  }
}

// Этим отправляем actions через Dispatch в props
const mapDispatchToProps = {
  fetchPhoneById,
  addPhoneToBasket
}

// Для того, чтобы fetchPhoneById был нам доступен в props, давайте подключим connect и добавим туда этот екшен
export default connect(mapStateToProps, mapDispatchToProps)(Phone)