/* 
Модуль содержит функции selectors:

Поиск всех телефонов и поиск,
Поиск телефона по ID,
Вычисление колличества товаров в корзине,
Вычисление стоимости товаров в корзине,
Показывает колличество товаров уже отрисованых на старнице (Load More),
Подсчет колличества товаров в корзине
Подсчет общей цены товаров в корзине,
Категории,
Корзина тваров

*/


import R from 'ramda'


 // Вытаскиваем названия категорий из объекта categories 
  // Используя метод R.values мы можем получить все категории в виде массива из обьекта
export const getCategories = state => R.values(state.categories)

  // Вытаскиваем названия категорий из объекта categories
  //R.path - Первым аргументом мы передаем массив цепочки, а вторым объект, на который хотим вызвать цепочку
  // R.path проверяет, чтобы 'params', 'id' не были бы undefined
export const getActiveCategoryId = ownProps => R.path(['params', 'id'], ownProps) // Получаем id категории


// Поиск телефона по ID, возвращает объект по ID или null
export const getPhoneById = (state, id) => R.prop(id, state.phones)

 // Все телефоны и поиск - Search, модифицируем для отображения категорий
export const getPhones = (state, ownProps) => {

  // Получаем активную категорию
  const activeCategoryId = getActiveCategoryId(ownProps)
    
    // функция applySearch, которая будет просто фильтровать полученные телефоны по имени
    
     const applySearch = item => R.compose(
         // Содержит ли поле search маленькими буквами
    R.contains(R.toLower(state.phonesPage.search)), // по умолчанию строка фильтра contains всегда пустая
    // маленькими буквами
    R.toLower,
    R.prop('name') // поле name
  )(item)

  const applyCategory = item => R.equals(
    getActiveCategoryId(ownProps),
    R.prop('categoryId', item)
  )

  const phones = R.compose(
    // Фильтруем по Search
    R.filter(applySearch),
    // Если activeCategoryId не undefined, то выполняем фильтр по категории
    R.when(R.always(activeCategoryId), R.filter(applyCategory)),
    R.map(id => getPhoneById(state, id))
  )(state.phonesPage.ids)
  
  return phones 

      /* OLD - Все телефоны и поиск - Search
      // Оборачиваем старую функцию в compose
      const phones = R.compose(
        // Применяем фильтрацию
        R.filter(applySearch),   
        //Мапим  ids, чтобы найти все нужные телефоны
        R.map(id => getPhoneById(state, id))
        // выносим state.phonesPage.ids в отдельные скобки - синтаксис R.compose
      )(state.phonesPage.ids)
    
      return phones  
    */
}

/*
// OLD method *** Запрос всех телефонов
export const getPhones = state => {  
    // Мапим  ids, чтобы найти все нужные телефоны
    const phones = R.map(id => getPhoneById(state, id), state.phonesPage.ids)
    return phones
  }
*/

// Показывает колличество товаров уже отрисованых на старнице (Load More)
// R.length возвращает длину массива
export const getRenderedPhonesLength = state => R.length(state.phonesPage.ids)


// Методы корзины

// Подсчет колличества товаров в корзине
export const getTotalBasketCount = state => R.length(state.basket)

// Подсчет общей цены товаров в корзине, просто считаем длинну массива корзины

export const getTotalBasketPrice = state => {
       // Compose работает справа на лево, берем из корзины все телефоны по idшникам.
    // Берем из каждого обьекта только цену и потом суммируем ее с помощью метода sum.
    const totalPrice = R.compose(
      R.sum,
      R.pluck('price'),
      R.map(id => getPhoneById(state, id))// Используем ранее созданный метод getPhoneById
    )(state.basket)
  
    return totalPrice
  }

  // Этот метод будет возвращать количество уникальных телефонов по id для корзины
  export const getBasketPhonesWithCount = state => {
    
   //Внутри метод phoneCount мы фильтруем все idшники в basket по текущему id и находим их количество.
    const phoneCount = id => R.compose(
      R.length, // по длинне массива получаем колличество телевонов одной модели
      R.filter(basketId => R.equals(id, basketId))
    )(state.basket)

    const phoneWithCount = phone => R.assoc('count', phoneCount(phone.id), phone)
  
     // UNIQ - возвращает только уникальные значения присутствующие в объекте или массиве
    // Получаем id товаров в корзине
    const uniqueIds = R.uniq(state.basket)
    const phones = R.compose(
      R.map(phoneWithCount),
      R.map(id => getPhoneById(state, id))
    )(uniqueIds)
  
    return phones
  }
  
 