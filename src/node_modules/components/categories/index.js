/* 
Component React - Categories
 
Данный компонент мы будем рендерить на Sidebar

*/

import React from 'react'
import {connect} from 'react-redux'
import {Link, withRouter} from 'react-router'
// Для обертки connect в compose от Redux
import {compose} from 'redux'

import R from 'ramda'
import classNames from 'classnames'
// Мои импорты
import {getCategories, getActiveCategoryId} from 'selectors'

// Аргументом передаем деструктурированный {categories}
const Categories = ({categories, activeCategoryId}) => {

    // Проверим id активной категории
    console.log('activeCategoryId', activeCategoryId)

    // Вычисляем категорию 
    const renderCategory = (category, index) => {

      // Мы проверяем что activeCategoryId равняется id текущей категории и тогда добавляем класс active.
      const getActiveState = R.propEq('id', activeCategoryId)
      // Подключаем библиотеку classNames для возможности использовать составные, изменяющиеся классы
      //В данном случае для подсветки активной категории 
      const linkClass = classNames({
        'list-group-item': true,        
        'active': getActiveState(category)
      })
    

        // Делаем из каждой категории Link
      return (
        <Link
          to={`/categories/${category.id}`}
          className={linkClass}
          key={index}
        >
        {/* Название категории */}
          {category.name}
        </Link>
      )
    }

    // Метод возвращает на Все категории, линк - /
    const renderAllCategory = () => {
      const linkClass = classNames({
        'list-group-item': true,
        // Если activeCategoryId - undefined, active class применяется (true)
        'active': R.isNil(activeCategoryId)
      })
    
      return (
        <Link
          to='/'
          className={linkClass}
        >
          All
        </Link>
      )
    }
  
  
    return (
      <div className='well'>
        <h4>Brand</h4>
        <div className='list-group'>
        {renderAllCategory()}
        {/* Маппим категории и вызываем метод Линкующий категории*/}
          {categories.map((category, index) => renderCategory(category, index))}
        </div>
      </div>
    )
  }

  // Метод withRouter дает нам возможность вторым параметром в mapStateToProps получить ownProps, которая содержит в себе id категории из url.
  const mapStateToProps = (state, ownProps) => ({
    categories: getCategories(state),
    activeCategoryId: getActiveCategoryId(ownProps)
  })

  // так как мы хотим одновременно применить и withRouter и connect, то мы можем использовать метод compose из redux
  export default compose(
    withRouter,
    connect(mapStateToProps, null)
  )(Categories)
  
// OLD ****
//   export default connect(mapStateToProps, null)(Categories)